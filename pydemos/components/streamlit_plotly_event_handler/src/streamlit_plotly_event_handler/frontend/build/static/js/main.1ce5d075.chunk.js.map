{"version":3,"sources":["plotly_relayout_event_handler.tsx","index.tsx"],"names":["PlotlyRelayoutEventHandler","state","data","layout","config","frames","render","plotObj","JSON","parse","props","args","overrideHeight","overrideWidth","Streamlit","setFrameHeight","selectOnlyLastShape","onInitialized","setState","onUpdate","figure","onRelayout","relayoutEventHandler","style","height","width","useResizeHandler","className","eventData","shapes","Object","values","forEach","shape","push","x0","x1","y0","y1","setComponentValue","stringify","this","layoutShapesLength","keys","length","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"wPAqCMA,E,4MACJC,MAAe,CAACC,KAAM,GAAIC,OAAQ,CAAC,EAAGC,OAAQ,CAAC,EAAGC,OAAQ,I,EAE1DC,OAAS,WAEP,IAAMC,EAAUC,KAAKC,MAAM,EAAKC,MAAMC,KAAX,UAErBC,EAAiB,EAAKF,MAAMC,KAAX,gBACjBE,EAAgB,EAAKH,MAAMC,KAAX,eAKtB,OAFAG,IAAUC,eAAeH,GAGvB,cAAC,IAAD,CAEEV,KAAM,EAAKD,MAAMC,KACjBC,OAAQ,EAAKa,oBAAoB,EAAKf,MAAME,QAC5CC,OAAQ,EAAKH,MAAMG,OACnBC,OAAQ,EAAKJ,MAAMI,OAEnBY,cAAe,kBAAM,EAAKC,SAASX,EAApB,EACfY,SAAU,SAAAC,GAAM,OAAI,EAAKF,SAASE,EAAlB,EAEhBC,WAAY,SAACnB,GACX,EAAKoB,qBAAqBpB,EAC3B,EAEDqB,MAAO,CAACC,OAAQZ,EAAgBa,MAAOZ,GACvCa,kBAAkB,EAClBC,UAAU,UAGf,E,0DAGD,SAA6BzB,GAE3B,IAAM0B,EAAsB,GAIxB1B,EAAK2B,QACLC,OAAOC,OAAO7B,EAAK2B,QAAQG,SAAQ,SAACC,GAClCL,EAAUM,KAAK,CACbC,GAAIF,EAAME,GACVC,GAAIH,EAAMG,GACVC,GAAIJ,EAAMI,GACVC,GAAIL,EAAMK,IAEb,IAILxB,IAAUyB,kBAAkB/B,KAAKgC,UAAUZ,IAC3Ca,KAAKnC,QACN,G,iCAED,SAA4BH,GAC1B,GAAIA,EAAO0B,OAAQ,CACjB,IAAMa,EAAqBZ,OAAOa,KAAKxC,EAAO0B,QAAQe,OAEtDzC,EAAO0B,OAAS1B,EAAO0B,OAAOa,EAAqB,EAGpD,CAED,OAAOvC,CACR,K,GApEsC0C,KAyE1BC,cAAwB9C,GCzGvC+C,IAASzC,OACP,cAAC,IAAM0C,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,Q","file":"static/js/main.1ce5d075.chunk.js","sourcesContent":["/**\n * Streamlit Component to handle relayout events in Plotly.\n *\n * The component declares a connection with Streamlit.\n * On receiving a relayout event from Plotly, returns a JSON that, parsed,\n * contains a list of objects with the coordinates of each shapes drawn\n * on the plot.\n *\n * Format of object:\n *      {\n *          x0: number (value of smallest x coord),\n *          x1: number (value of largest x coord),\n *          y0: number (value of smallest y coord),\n *          y1: number (value of largest y coord)\n *      }\n */\n\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from 'streamlit-component-lib';\nimport React, {ReactNode} from 'react';\nimport * as reactPlotly from './react_plotly_types';\n// Disables lint error since plotly and react-plotly dependencies end in '.js'.\n// tslint:disable:ban-malformed-import-paths\nimport Plot from 'react-plotly.js';\nimport {Shape} from 'plotly.js';\n// tslint:enable:ban-malformed-import-paths\n\ninterface State {\n  data: reactPlotly.Figure['data'];\n  layout: reactPlotly.Figure['layout'];\n  config: reactPlotly.PlotParams['config'];\n  frames: reactPlotly.Figure['frames'];\n}\n\nclass PlotlyRelayoutEventHandler extends StreamlitComponentBase<State> {\n  state: State = {data: [], layout: {}, config: {}, frames: []};\n\n  render = (): ReactNode => {\n    // Pull Plotly object from args and parse\n    const plotObj = JSON.parse(this.props.args['plot_obj']);\n\n    const overrideHeight = this.props.args['override_height'];\n    const overrideWidth = this.props.args['override_width'];\n\n    // Important to set for Streamlit's own component rendering\n    Streamlit.setFrameHeight(overrideHeight);\n\n    return (\n      <Plot\n        // Plot props.\n        data={this.state.data}\n        layout={this.selectOnlyLastShape(this.state.layout)}\n        config={this.state.config}\n        frames={this.state.frames}\n        // Set plot state on initialization and keep it updated on changes.\n        onInitialized={() => this.setState(plotObj)}\n        onUpdate={figure => this.setState(figure)}\n        // Relayout event handler.\n        onRelayout={(data: Partial<reactPlotly.PlotParams['layout']>) => {\n          this.relayoutEventHandler(data);\n        }}\n        // Styling.\n        style={{height: overrideHeight, width: overrideWidth}}\n        useResizeHandler={true}\n        className=\"stPlot\"\n      />\n    );\n  };\n\n  /** Relayout event handler for plot. */\n  private relayoutEventHandler(data: Partial<reactPlotly.PlotParams['layout']>) {\n    // Build array of boxes to return\n    const eventData: object[] = [];\n\n    // If there is return data, iterate through it and add each shape's\n    // coordinates to the eventData array that we will return at the end.\n    if (data.shapes){\n        Object.values(data.shapes).forEach((shape: Partial<Shape>) => {\n          eventData.push({\n            x0: shape.x0,\n            x1: shape.x1,\n            y0: shape.y0,\n            y1: shape.y1,\n          });\n        });\n    }\n\n    // Return array as JSON to Streamlit\n    Streamlit.setComponentValue(JSON.stringify(eventData));\n    this.render();\n  }\n\n  private selectOnlyLastShape(layout: reactPlotly.PlotParams['layout']) {\n    if (layout.shapes) {\n      const layoutShapesLength = Object.keys(layout.shapes).length;\n      // Keep only last drawn shape.\n      layout.shapes = layout.shapes[layoutShapesLength - 1] as Array<\n        Partial<Shape>\n      >;\n    }\n\n    return layout;\n  }\n}\n\n// Disables lint error since default export is necessary for Streamlit.\n// tslint:disable-next-line:no-default-export\nexport default withStreamlitConnection(PlotlyRelayoutEventHandler);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PlotlyRelayoutEventHandler from \"./plotly_relayout_event_handler\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <PlotlyRelayoutEventHandler />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}